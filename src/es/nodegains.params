# Copyright 2006 by Sean Luke and George Mason University
# Licensed under the Academic Free License version 3.0
# See the file "LICENSE" for more information

# Some rules about Java Property Lists, which is what the
# system uses for parameters.  Java property lists are a little weird:
# 
# 1. Lines with only whitespace are ignored.
# 2. Lines beginning with a # are ignored.
# 3. Initial whitespace is trimmed.  The property is everything up to 
#    the next chunk of whitespace or a '='
# 4. A following '=' is *optional*
# 5. After the chunk of whitespace and the optional '=', the next
#    whitespace is trimmed.
# 6. Typically, EVERYTHING after that is the value of the property, 
#    up to but not including a '\n'. However, my version trims off
#    the final bit of whitespace if any.
# 7. If two parameters of the same name are found, the later one
#    is used.
#
# Some examples and warnings:
#
# LINE (begins at | )          PROPERTY(between /'s)  VALUE(between /'s)
#
# |yo.yo.yo! = heave ho               /yo.yo.yo!/            /heave ho/
# |my parameter                       /my/                   /parameter/
# |my=parameter                       /my/                   /parameter/
# |my= parameter                      /my/                   /parameter/
# |
# |#this is a comment
# |    # this is NOT                  /#/                    /this is NOT/
# |
# |   my    =parameter                /my/                   /parameter/
# |my parameter = this                /my/                   /parameter = this/
# |myparameter=                       /myparameter/          //
# |myparameter                        /myparameter/          //
# |=myparameter                       //                     /myparameter/
# |watch out here!                    /watch/                /out here!/
# |comments=don't work  #see?         /comments/             /don't work  #see?/
#
#
# The '.' is the delimiter for hierarchical elements.  
# You generally shouldn't begin or end a property with an '.'
#
# If you want a list to first load some parent lists, include them as parameters:
#
#    parent.0 = filename for 0
#    parent.1 = filename for 1
#    ....
#
# The parameters will load as follows: your parameters will get checked first,
# Then parent 0 (and all its ancestors), then parent 1 (and all its ancestors),
# and so on.
#





#
# Here are a few default values for administration stuff -- you can
# find some basic evolution parameters in simple/params



# ec.Evolve
# ==============================

# one thread
evalthreads = 				1
breedthreads = 				1

# ECJ used to use this as its initial random seed by default.  No longer, now
# it's assumed to be the wall clock time by default.
# seed.0 = 				4357
seed.0 =				time




# ec.EvolutionState
# ==============================

# We're not writing checkpoint files.  If we were, we'd do it every
# generation, and the prefix to all the files would be "ec.*"
checkpoint =				false
checkpoint-modulo =                     1
checkpoint-prefix = 			ec

# 
# The following parameter file will set up a very basic form
# of evolution, single-threaded, no coevolution, no exchanging,
# no cross-population breeding, using generational evolution,
# simple fitness, popsize=1024, etc. 
# You'll need to fill in some of the gaps.
#

# ec.Evolve
# ==============================

# simple generational evolution
state = 				ec.simple.SimpleEvolutionState



# ec.EvolutionState
# ==============================

# We're using the standard initialization method
init = 					ec.simple.SimpleInitializer

# We're using the standard (empty) finalization method
finish = 	        		ec.simple.SimpleFinisher

# We're using the standard (empty) exchange method
exch = 					ec.simple.SimpleExchanger

# We're using standard breeding -- no cross-population breeding
breed =					ec.simple.SimpleBreeder

# We're using standard evaluation -- no coevolution
eval =					ec.simple.SimpleEvaluator

# We're using simple statistics
stat =					ec.simple.SimpleStatistics

# run for 51 generations, quit prematurely if I find something ideal
generations =				51
quit-on-run-complete =			true



# ec.Initializer
# ==============================

pop = 					ec.Population


# ec.Population
# ==============================

# No multiple populations
pop.subpops =				1
pop.subpop.0 = 				ec.Subpopulation


# ec.Subpopulation
# ==============================

# subpop size is 1024 individuals
pop.subpop.0.size =			1024
# don't bother trying to eliminate duplicates from the
# initial population
pop.subpop.0.duplicate-retries =	0

# ==You need to provide the species info for the subpopulation.==

# ec.simple.SimpleBreeder
# ==============================

# By default elitism isn't done.  If you want to do elitism for, say,
# the top 10 individuals in subpopulation 0, you'd say:

# breed.elite.0 = 			10


# ec.SimpleStatistics
# ==============================

# output statistics to the file "out.stat" in the directory
# the run was started in
stat.file				$out.stat

# Copyright 2006 by Sean Luke and George Mason University
# Licensed under the Academic Free License version 3.0
# See the file "LICENSE" for more information

#
# This file roughly defines a typeless, Koza-I-style
# generational GP system with a single tree (meaning
# no ADFs or ADMs.  We use Tournament selection instead
# of Koza-style Fitness-proportionate selection because
# fitness-proportionate selection, well, is kinda icky.
#


#
# We define the fitness of an individual to use the traditional
# Koza-style fitness metrics, just to make everyone happy :-)
#

pop.subpop.0.species.fitness = ec.gp.koza.KozaFitness

#
# We have a GP-specific initializer.  But we'll keep the
# statistics as a SimpleStatistics (defined in simple.params)

init = ec.gp.GPInitializer


# We have a single subpopulation containing a GPSpecies,
# using GPIndividuals as the prototypical individual class.

pop.subpop.0.species = ec.gp.GPSpecies
pop.subpop.0.species.ind = ec.gp.GPIndividual

# We retry 100 times for duplicates (this is the lil-gp default)
# in our subpopulation 0

pop.subpop.0.duplicate-retries = 100

# That GPIndividual has a single tree, which uses the
# "tc0" Tree Constraints (which we define below later)

pop.subpop.0.species.ind.numtrees = 1
pop.subpop.0.species.ind.tree.0 = ec.gp.GPTree
pop.subpop.0.species.ind.tree.0.tc = tc0


# The GPSpecies has 2 pipelines, Crossover and Reproduction,
# chosen with 0.9 and 0.1 likelihood respectively.

pop.subpop.0.species.pipe = ec.breed.MultiBreedingPipeline
# Koza's decision here was odd...
pop.subpop.0.species.pipe.generate-max = false
# Subsidiary pipelines:
pop.subpop.0.species.pipe.num-sources = 2
pop.subpop.0.species.pipe.source.0 = ec.gp.koza.CrossoverPipeline
pop.subpop.0.species.pipe.source.0.prob = 0.9
pop.subpop.0.species.pipe.source.1 = ec.breed.ReproductionPipeline
pop.subpop.0.species.pipe.source.1.prob = 0.1




#
# Here we define the default values for Crossover,
# Reproduction, Mutation, as well as our selection
# approaches (Koza I).  These can be overridden on a per-species
# level of course.
#

# Reproduction will use Tournament Selection 
breed.reproduce.source.0 = ec.select.TournamentSelection

# Crossover will use Tournament Selection, try only 1
# time, have a max depth of 17, and use KozaNodeSelector
gp.koza.xover.source.0 = ec.select.TournamentSelection
gp.koza.xover.source.1 = same
gp.koza.xover.ns.0 = ec.gp.koza.KozaNodeSelector
gp.koza.xover.ns.1 = same
gp.koza.xover.maxdepth = 17
# This is the default for Koza and lil-gp, though it's
# a little wimpy; on the other hand, a higher number can
# make things really slow
gp.koza.xover.tries = 1




# Point Mutation will use Tournament Selection, try only 1
# time, have a max depth of 17, and use KozaNodeSelector
# and GROW for building.  Also, Point Mutation uses a GrowBuilder
# by default, with a default of min-depth=max-depth=5
# as shown a ways below
gp.koza.mutate.source.0 = ec.select.TournamentSelection
gp.koza.mutate.ns.0 = ec.gp.koza.KozaNodeSelector
gp.koza.mutate.build.0 = ec.gp.koza.GrowBuilder
gp.koza.mutate.maxdepth = 17
# This is the default for Koza and lil-gp, though it's
# a little wimpy; on the other hand, a higher number can
# make things really slow
gp.koza.mutate.tries = 1




#
# The default tournament size for TournamentSelection is 7
#

select.tournament.size = 7




# Since GROW is only used for subtree mutation, ECJ uses
# the Koza-standard subtree mutation GROW values for the
# default for GROW as a whole.  This default is
# min-depth=max-depth=5, which I don't like very much,
# but hey, that's the standard.  
# This means that if someone decided to use GROW to generate
# new individual trees, it's also use the defaults below
# unless he overrided them locally.
gp.koza.grow.min-depth = 5
gp.koza.grow.max-depth = 5



#
# We specify a few things about ADFs  -- what kind 
# of stack they use, and what kind of context
#

gp.problem.stack = ec.gp.ADFStack
gp.adf-stack.context = ec.gp.ADFContext

# 
# Here we define the default values for KozaNodeSelection;
# as always, these can be overridden by values hanging off
# of the Crossover/Reproduction/Mutation/whatever pipelines,
# like we did for node-building, but hey, whatever. 
# The default is 10% terminals, 90% nonterminals when possible,
# 0% "always pick the root", 0% "pick any node"

gp.koza.ns.terminals = 0.1
gp.koza.ns.nonterminals = 0.9
gp.koza.ns.root = 0.0




# You need to create at least one function set, 
# called "f0", which your first tree will use.  
# You don't need to include the class declaration here,
# but it quiets warnings.

gp.fs.size = 1
gp.fs.0 = ec.gp.GPFunctionSet
gp.fs.0.name = f0
#fill the rest of this out on a per-problem basis


# Here we define a single atomic type, "nil", which everyone will use.
# There are no set types defined.

gp.type.a.size = 1
gp.type.a.0.name = nil
gp.type.s.size = 0

# Here we define one GPTreeConstraints object, "tc0",
# which uses ec.gp.koza.HalfBuilder to create nodes,
# only allows nodes from the GPFunctionSet "fset",
# and has the single type "nil" as its tree type.
# You don't need to include the class declaration here,
# but it quiets warnings.

gp.tc.size = 1
gp.tc.0 = ec.gp.GPTreeConstraints
gp.tc.0.name = tc0
gp.tc.0.fset = f0
gp.tc.0.returns = nil

# The tree uses an ec.gp.koza.HalfBuilder to create
# itself initially.
# HalfBuilder will pick GROW half the time and FULL
# the other half, with a ramp from 2 to 6 inclusive.
# By ramp we mean that it first picks a random number between
# 2 and 6 inclusive.  This then becomes the *maximum* tree size
# (for the FULL approach, it's the tree size of the tree, for
# GROW, the tree can get no bigger than this)

gp.tc.0.init = ec.gp.koza.HalfBuilder

# We set the default for HalfBuilder to be a ramp of 2--6,
# with a grow probability of 0.5
gp.koza.half.min-depth = 2
gp.koza.half.max-depth = 6
gp.koza.half.growp = 0.5




# Here we define 7 GPNodeConstraints, nc0...nc6, which
# describe nodes with 0...6 children respectively, which only
# use a single type, "nil", for their argument and return types
# You don't need to include the class declarations with everything
# else below, but it quiets warnings

gp.nc.size = 7

gp.nc.0 = ec.gp.GPNodeConstraints
gp.nc.0.name = nc0
gp.nc.0.returns = nil
gp.nc.0.size = 0

gp.nc.1 = ec.gp.GPNodeConstraints
gp.nc.1.name = nc1
gp.nc.1.returns = nil
gp.nc.1.size = 1
gp.nc.1.child.0 = nil

gp.nc.2 = ec.gp.GPNodeConstraints
gp.nc.2.name = nc2
gp.nc.2.returns = nil
gp.nc.2.size = 2
gp.nc.2.child.0 = nil
gp.nc.2.child.1 = nil

gp.nc.3 = ec.gp.GPNodeConstraints
gp.nc.3.name = nc3
gp.nc.3.returns = nil
gp.nc.3.size = 3
gp.nc.3.child.0 = nil
gp.nc.3.child.1 = nil
gp.nc.3.child.2 = nil

gp.nc.4 = ec.gp.GPNodeConstraints
gp.nc.4.name = nc4
gp.nc.4.returns = nil
gp.nc.4.size = 4
gp.nc.4.child.0 = nil
gp.nc.4.child.1 = nil
gp.nc.4.child.2 = nil
gp.nc.4.child.3 = nil

gp.nc.5 = ec.gp.GPNodeConstraints
gp.nc.5.name = nc5
gp.nc.5.returns = nil
gp.nc.5.size = 5
gp.nc.5.child.0 = nil
gp.nc.5.child.1 = nil
gp.nc.5.child.2 = nil
gp.nc.5.child.3 = nil
gp.nc.5.child.4 = nil

gp.nc.6 = ec.gp.GPNodeConstraints
gp.nc.6.name = nc6
gp.nc.6.returns = nil
gp.nc.6.size = 6
gp.nc.6.child.0 = nil
gp.nc.6.child.1 = nil
gp.nc.6.child.2 = nil
gp.nc.6.child.3 = nil
gp.nc.6.child.4 = nil
gp.nc.6.child.5 = nil






#### GP Symbolic Regression Benchmark Problems
#
# This parameter file provides options for doing a variety of common symbolic regression
# benchmark problems defined in the paper "Genetic Programming Needs Better Benchmarks",
# GECCO 2012.  Additionally, one more problem, pagie-2, is provided.
#
# There are 54 benchmarks in all.  Benchmarks vary widely in several respects:
#
# 1. The target function (of course)
# 2. The number of variables, ranging from 1 to 5
# 3. How the training set is generated and the number of test samples.
# 4. How the generalization/testing set is generated, if there is one, and the
#    number of test samples.  If no testing set is indicated for a problem, 
#    ECJ will consider the training and testing sets to be the same.
# 5. The function set used
#
# For ECJ's purposes, items 1, 3, and 4 are determined by the problem name that you
# specify here.  Items 2 and 5 are determined by the function set name that you 
# specify.  You have to specify both (sorry), but ECJ knows which problems use which
# function sets and will warn you when your'e using the wrong one.
#
# Here's where you specify the problem and the function set:


eval.problem.type = vladislavleva-1
gp.tc.0.fset = vladislavleva-b2



# Additionally, you have the option of loading the training and/or test samples from
# files.  Each of these files has the following format.  First comes a number indicating
# how many samples there are.  Usually you'd put this on its own line.  After this comes
# each sample, typically on its own line.  A sample consists of a collection of 
# whitespace delimited numbers.  The first N numbers are the input variables.  The last
# number is the expected output variable.  The value of N must match the expected number
# of variables for the problem.
#
# Here's how you'd specify the training and/or testing files.


# eval.problem.testing-file = $testing.in
# eval.problem.training-file = $training.in


# Most of this file defines various function sets for the problems in question.  See the
# paper above for more explanation about these sets.  Here's a table describing the
# problems and function sets and expected number of variables (you need this last one
# if you're building your own training and/or testing files).  See further down
# in this file for an explanation of the naming style of the function sets.
# 
# After the GECCO paper was released, we made tweaks to some of the definitions of the
# problems below due to errors in the paper.  The revised version of the paper has
# been posted at gpbenchmarks.org and my website, and the problem definitions reflect
# those changes as of January 1, 2013.

# PROBLEM NAME        FUNCTION SET      NUMBER OF VARIABLES, AND USEFUL NOTES
# koza-1              koza1             1       * no testing set
# koza-2              koza1             1       * no testing set
# koza-3              koza1             1       * no testing set
# nguyen-1            koza1             1       * no testing set
# nguyen-2            koza1             1       * no testing set; identical to koza-2
# nguyen-3            koza1             1       * no testing set
# nguyen-4            koza1             1       * no testing set
# nguyen-5            koza1             1       * no testing set
# nguyen-6            koza1             1       * no testing set
# nguyen-7            koza1             1       * no testing set
# nguyan-8            koza1             1       * no testing set
# nguyen-9            koza2             2       * no testing set
# nguyen-10           koza2             2       * no testing set
# nguyen-11           koza2             2       * no testing set; not in REVISED GECCO paper
# nguyen-12           koza2             2       * no testing set; not in REVISED GECCO paper
# pagie-1             koza2             2       * no testing set
# pagie-2             koza3             3       * no testing set; not in GECCO paper
# korns-1             korns5            5       
# korns-2             korns5            5
# korns-3             korns5            5
# korns-4             korns5            5
# korns-5             korns5            5
# korns-6             korns5            5
# korns-7             korns5            5
# korns-8             korns5            5
# korns-9             korns5            5       * Revised from GECCO paper
# korns-10            korns5            5
# korns-11            korns5            5
# korns-12            korns5            5
# korns-13            korns5            5
# korns-14            korns5            5
# korns-15            korns5            5
# keijzer-1           keijzer1          1
# keijzer-2           keijzer1          1
# keijzer-3           keijzer2          1       * Revised from GECCO paper
# keijzer-4           keijzer1          1
# keijzer-5           keijzer3          3       * Revised from GECCO paper
# keijzer-6           keijzer1          1
# keijzer-7           keijzer1          1
# keijzer-8           keijzer1          1
# keijzer-9           keijzer1          1
# keijzer-10          keijzer2          2
# keijzer-11          keijzer2          2
# keijzer-12          keijzer2          2
# keijzer-13          keijzer2          2
# keijzer-14          keijzer2          2
# keijzer-15          keijzer2          2
# vladislavleva-1     vladislavleva-b2  2       * Revised from GECCO paper
# vladislavleva-2     vladislavleva-c1  1       * Revised from GECCO paper
# vladislavleva-3     vladislavleva-c2  2
# vladislavleva-4     vladislavleva-a5  5
# vladislavleva-5     vladislavleva-a3  3
# vladislavleva-6     vladislavleva-b2  2
# vladislavleva-7     vladislavleva-c2  2
# vladislavleva-8     vladislavleva-a2  2



# GP Function sets have a NAME followed by the number of VARIABLES:
# Names include koza, korns, keijzer, 
#               vladislavleva-a, vladislavleva-b, vladislavleva-c
#
# Function sets:
#
# koza1             * This is standard Koza, without ERCs
# koza2		    * Also no ERCs
# koza3		    * Also no ERCs
# korns5
# keijzer1
# keijzer2
# keijzer3
# vladislavleva-a2
# vladislavleva-a3
# vladislavleva-a5
# vladislavleva-b2
# vladislavleva-c1
# vladislavleva-c2





### Here are all the function set definitions

gp.fs.size = 13


# koza1
# Note: Koza1 has no ERCs
gp.fs.0 = ec.gp.GPFunctionSet
gp.fs.0.name = koza1
gp.fs.0.size = 9
gp.fs.0.func.0 = es.nodegains.gp.func.Add
gp.fs.0.func.0.nc = nc2
gp.fs.0.func.1 = es.nodegains.gp.func.Mul
gp.fs.0.func.1.nc = nc2
gp.fs.0.func.2 = es.nodegains.gp.func.Sub
gp.fs.0.func.2.nc = nc2
gp.fs.0.func.3 = es.nodegains.gp.func.Div
gp.fs.0.func.3.nc = nc2
gp.fs.0.func.4 = es.nodegains.gp.func.Sin
gp.fs.0.func.4.nc = nc1
gp.fs.0.func.5 = es.nodegains.gp.func.Cos
gp.fs.0.func.5.nc = nc1
gp.fs.0.func.6 = es.nodegains.gp.func.Exp
gp.fs.0.func.6.nc = nc1
gp.fs.0.func.7 = es.nodegains.gp.func.Log
gp.fs.0.func.7.nc = nc1
gp.fs.0.func.8 = es.nodegains.gp.func.X1
gp.fs.0.func.8.nc = nc0


# koza2
# Note: koza2 has no ERCs
gp.fs.1 = ec.gp.GPFunctionSet
gp.fs.1.name = koza2
gp.fs.1.size = 10
gp.fs.1.func.0 = es.nodegains.gp.func.Add
gp.fs.1.func.0.nc = nc2
gp.fs.1.func.1 = es.nodegains.gp.func.Mul
gp.fs.1.func.1.nc = nc2
gp.fs.1.func.2 = es.nodegains.gp.func.Sub
gp.fs.1.func.2.nc = nc2
gp.fs.1.func.3 = es.nodegains.gp.func.Div
gp.fs.1.func.3.nc = nc2
gp.fs.1.func.4 = es.nodegains.gp.func.Sin
gp.fs.1.func.4.nc = nc1
gp.fs.1.func.5 = es.nodegains.gp.func.Cos
gp.fs.1.func.5.nc = nc1
gp.fs.1.func.6 = es.nodegains.gp.func.Exp
gp.fs.1.func.6.nc = nc1
gp.fs.1.func.7 = es.nodegains.gp.func.Log
gp.fs.1.func.7.nc = nc1
gp.fs.1.func.8 = es.nodegains.gp.func.X1
gp.fs.1.func.8.nc = nc0
gp.fs.1.func.9 = es.nodegains.gp.func.X2
gp.fs.1.func.9.nc = nc0


# koza3
# Note: koza3 has no ERCs
gp.fs.2 = ec.gp.GPFunctionSet
gp.fs.2.name = koza3
gp.fs.2.size = 11
gp.fs.2.func.0 = es.nodegains.gp.func.Add
gp.fs.2.func.0.nc = nc2
gp.fs.2.func.1 = es.nodegains.gp.func.Mul
gp.fs.2.func.1.nc = nc2
gp.fs.2.func.2 = es.nodegains.gp.func.Sub
gp.fs.2.func.2.nc = nc2
gp.fs.2.func.3 = es.nodegains.gp.func.Div
gp.fs.2.func.3.nc = nc2
gp.fs.2.func.4 = es.nodegains.gp.func.Sin
gp.fs.2.func.4.nc = nc1
gp.fs.2.func.5 = es.nodegains.gp.func.Cos
gp.fs.2.func.5.nc = nc1
gp.fs.2.func.6 = es.nodegains.gp.func.Exp
gp.fs.2.func.6.nc = nc1
gp.fs.2.func.7 = es.nodegains.gp.func.Log
gp.fs.2.func.7.nc = nc1
gp.fs.2.func.8 = es.nodegains.gp.func.X1
gp.fs.2.func.8.nc = nc0
gp.fs.2.func.9 = es.nodegains.gp.func.X2
gp.fs.2.func.9.nc = nc0
gp.fs.2.func.10 = es.nodegains.gp.func.X3
gp.fs.2.func.10.nc = nc0



# korns5
gp.fs.3 = ec.gp.GPFunctionSet
gp.fs.3.name = korns5
gp.fs.3.size = 19
gp.fs.3.func.0 = es.nodegains.gp.func.Add
gp.fs.3.func.0.nc = nc2
gp.fs.3.func.1 = es.nodegains.gp.func.Mul
gp.fs.3.func.1.nc = nc2
gp.fs.3.func.2 = es.nodegains.gp.func.Sub
gp.fs.3.func.2.nc = nc2
gp.fs.3.func.3 = es.nodegains.gp.func.Div
gp.fs.3.func.3.nc = nc2
gp.fs.3.func.4 = es.nodegains.gp.func.Sin
gp.fs.3.func.4.nc = nc1
gp.fs.3.func.5 = es.nodegains.gp.func.Cos
gp.fs.3.func.5.nc = nc1
gp.fs.3.func.6 = es.nodegains.gp.func.Exp
gp.fs.3.func.6.nc = nc1
gp.fs.3.func.7 = es.nodegains.gp.func.Log
gp.fs.3.func.7.nc = nc1
gp.fs.3.func.8 = es.nodegains.gp.func.Square
gp.fs.3.func.8.nc = nc1
gp.fs.3.func.9 = es.nodegains.gp.func.Cube
gp.fs.3.func.9.nc = nc1
gp.fs.3.func.10 = es.nodegains.gp.func.Sqrt
gp.fs.3.func.10.nc = nc1
gp.fs.3.func.11 = es.nodegains.gp.func.Tan
gp.fs.3.func.11.nc = nc1
gp.fs.3.func.12 = es.nodegains.gp.func.Tanh
gp.fs.3.func.12.nc = nc1
gp.fs.3.func.13 = es.nodegains.gp.func.KornsERC
gp.fs.3.func.13.nc = nc0
gp.fs.3.func.14 = es.nodegains.gp.func.X1
gp.fs.3.func.14.nc = nc0
gp.fs.3.func.15 = es.nodegains.gp.func.X2
gp.fs.3.func.15.nc = nc0
gp.fs.3.func.16 = es.nodegains.gp.func.X3
gp.fs.3.func.16.nc = nc0
gp.fs.3.func.17 = es.nodegains.gp.func.X4
gp.fs.3.func.17.nc = nc0
gp.fs.3.func.18 = es.nodegains.gp.func.X5
gp.fs.3.func.18.nc = nc0


# keijzer1
gp.fs.4 = ec.gp.GPFunctionSet
gp.fs.4.name = keijzer1
gp.fs.4.size = 7
gp.fs.4.func.0 = es.nodegains.gp.func.Add
gp.fs.4.func.0.nc = nc2
gp.fs.4.func.1 = es.nodegains.gp.func.Mul
gp.fs.4.func.1.nc = nc2
gp.fs.4.func.2 = es.nodegains.gp.func.Inv
gp.fs.4.func.2.nc = nc1
gp.fs.4.func.3 = es.nodegains.gp.func.Neg
gp.fs.4.func.3.nc = nc1
gp.fs.4.func.4 = es.nodegains.gp.func.Sqrt
gp.fs.4.func.4.nc = nc1
gp.fs.4.func.5 = es.nodegains.gp.func.KeijzerERC
gp.fs.4.func.5.nc = nc0
gp.fs.4.func.6 = es.nodegains.gp.func.X1
gp.fs.4.func.6.nc = nc0



# keijzer2
gp.fs.5 = ec.gp.GPFunctionSet
gp.fs.5.name = keijzer2
gp.fs.5.size = 8
gp.fs.5.func.0 = es.nodegains.gp.func.Add
gp.fs.5.func.0.nc = nc2
gp.fs.5.func.1 = es.nodegains.gp.func.Mul
gp.fs.5.func.1.nc = nc2
gp.fs.5.func.2 = es.nodegains.gp.func.Inv
gp.fs.5.func.2.nc = nc1
gp.fs.5.func.3 = es.nodegains.gp.func.Neg
gp.fs.5.func.3.nc = nc1
gp.fs.5.func.4 = es.nodegains.gp.func.Sqrt
gp.fs.5.func.4.nc = nc1
gp.fs.5.func.5 = es.nodegains.gp.func.KeijzerERC
gp.fs.5.func.5.nc = nc0
gp.fs.5.func.6 = es.nodegains.gp.func.X1
gp.fs.5.func.6.nc = nc0
gp.fs.5.func.7 = es.nodegains.gp.func.X2
gp.fs.5.func.7.nc = nc0



# keijzer3
gp.fs.6 = ec.gp.GPFunctionSet
gp.fs.6.name = keijzer3
gp.fs.6.size = 9
gp.fs.6.func.0 = es.nodegains.gp.func.Add
gp.fs.6.func.0.nc = nc2
gp.fs.6.func.1 = es.nodegains.gp.func.Mul
gp.fs.6.func.1.nc = nc2
gp.fs.6.func.2 = es.nodegains.gp.func.Inv
gp.fs.6.func.2.nc = nc1
gp.fs.6.func.3 = es.nodegains.gp.func.Neg
gp.fs.6.func.3.nc = nc1
gp.fs.6.func.4 = es.nodegains.gp.func.Sqrt
gp.fs.6.func.4.nc = nc1
gp.fs.6.func.5 = es.nodegains.gp.func.KeijzerERC
gp.fs.6.func.5.nc = nc0
gp.fs.6.func.6 = es.nodegains.gp.func.X1
gp.fs.6.func.6.nc = nc0
gp.fs.6.func.7 = es.nodegains.gp.func.X2
gp.fs.6.func.7.nc = nc0
gp.fs.6.func.8 = es.nodegains.gp.func.X3
gp.fs.6.func.8.nc = nc0


# vladislavleva-a2
# Note: vladislavleva has three ERCs, all of which are not constants
#       but rather are one-parameter functions with an embedded constant
gp.fs.7 = ec.gp.GPFunctionSet
gp.fs.7.name = vladislavleva-a2
gp.fs.7.size = 10
gp.fs.7.func.0 = es.nodegains.gp.func.Add
gp.fs.7.func.0.nc = nc2
gp.fs.7.func.1 = es.nodegains.gp.func.Mul
gp.fs.7.func.1.nc = nc2
gp.fs.7.func.2 = es.nodegains.gp.func.Sub
gp.fs.7.func.2.nc = nc2
gp.fs.7.func.3 = es.nodegains.gp.func.Div
gp.fs.7.func.3.nc = nc2
gp.fs.7.func.4 = es.nodegains.gp.func.Square
gp.fs.7.func.4.nc = nc1
gp.fs.7.func.5 = es.nodegains.gp.func.VladERCA
gp.fs.7.func.5.nc = nc1
gp.fs.7.func.6 = es.nodegains.gp.func.VladERCB
gp.fs.7.func.6.nc = nc1
gp.fs.7.func.7 = es.nodegains.gp.func.VladERCC
gp.fs.7.func.7.nc = nc1
gp.fs.7.func.8 = es.nodegains.gp.func.X1
gp.fs.7.func.8.nc = nc0
gp.fs.7.func.9 = es.nodegains.gp.func.X2
gp.fs.7.func.9.nc = nc0



# vladislavleva-a3
# Note: vladislavleva has three ERCs, all of which are not constants
#       but rather are one-parameter functions with an embedded constant
gp.fs.8 = ec.gp.GPFunctionSet
gp.fs.8.name = vladislavleva-a3
gp.fs.8.size = 11
gp.fs.8.func.0 = es.nodegains.gp.func.Add
gp.fs.8.func.0.nc = nc2
gp.fs.8.func.1 = es.nodegains.gp.func.Mul
gp.fs.8.func.1.nc = nc2
gp.fs.8.func.2 = es.nodegains.gp.func.Sub
gp.fs.8.func.2.nc = nc2
gp.fs.8.func.3 = es.nodegains.gp.func.Div
gp.fs.8.func.3.nc = nc2
gp.fs.8.func.4 = es.nodegains.gp.func.Square
gp.fs.8.func.4.nc = nc1
gp.fs.8.func.5 = es.nodegains.gp.func.VladERCA
gp.fs.8.func.5.nc = nc1
gp.fs.8.func.6 = es.nodegains.gp.func.VladERCB
gp.fs.8.func.6.nc = nc1
gp.fs.8.func.7 = es.nodegains.gp.func.VladERCC
gp.fs.8.func.7.nc = nc1
gp.fs.8.func.8 = es.nodegains.gp.func.X1
gp.fs.8.func.8.nc = nc0
gp.fs.8.func.9 = es.nodegains.gp.func.X2
gp.fs.8.func.9.nc = nc0
gp.fs.8.func.10 = es.nodegains.gp.func.X3
gp.fs.8.func.10.nc = nc0


# vladislavleva-a5
# Note: vladislavleva has three ERCs, all of which are not constants
#       but rather are one-parameter functions with an embedded constant
gp.fs.9 = ec.gp.GPFunctionSet
gp.fs.9.name = vladislavleva-a5
gp.fs.9.size = 13
gp.fs.9.func.0 = es.nodegains.gp.func.Add
gp.fs.9.func.0.nc = nc2
gp.fs.9.func.1 = es.nodegains.gp.func.Mul
gp.fs.9.func.1.nc = nc2
gp.fs.9.func.2 = es.nodegains.gp.func.Sub
gp.fs.9.func.2.nc = nc2
gp.fs.9.func.3 = es.nodegains.gp.func.Div
gp.fs.9.func.3.nc = nc2
gp.fs.9.func.4 = es.nodegains.gp.func.Square
gp.fs.9.func.4.nc = nc1
gp.fs.9.func.5 = es.nodegains.gp.func.VladERCA
gp.fs.9.func.5.nc = nc1
gp.fs.9.func.6 = es.nodegains.gp.func.VladERCB
gp.fs.9.func.6.nc = nc1
gp.fs.9.func.7 = es.nodegains.gp.func.VladERCC
gp.fs.9.func.7.nc = nc1
gp.fs.9.func.8 = es.nodegains.gp.func.X1
gp.fs.9.func.8.nc = nc0
gp.fs.9.func.9 = es.nodegains.gp.func.X2
gp.fs.9.func.9.nc = nc0
gp.fs.9.func.10 = es.nodegains.gp.func.X3
gp.fs.9.func.10.nc = nc0
gp.fs.9.func.11 = es.nodegains.gp.func.X4
gp.fs.9.func.11.nc = nc0
gp.fs.9.func.12 = es.nodegains.gp.func.X5
gp.fs.9.func.12.nc = nc0


# vladislavleva-b2
# Note: vladislavleva has three ERCs, all of which are not constants
#       but rather are one-parameter functions with an embedded constant
gp.fs.10 = ec.gp.GPFunctionSet
gp.fs.10.name = vladislavleva-b2
gp.fs.10.size = 12
gp.fs.10.func.0 = es.nodegains.gp.func.Add
gp.fs.10.func.0.nc = nc2
gp.fs.10.func.1 = es.nodegains.gp.func.Mul
gp.fs.10.func.1.nc = nc2
gp.fs.10.func.2 = es.nodegains.gp.func.Sub
gp.fs.10.func.2.nc = nc2
gp.fs.10.func.3 = es.nodegains.gp.func.Div
gp.fs.10.func.3.nc = nc2
gp.fs.10.func.4 = es.nodegains.gp.func.Square
gp.fs.10.func.4.nc = nc1
gp.fs.10.func.5 = es.nodegains.gp.func.Exp
gp.fs.10.func.5.nc = nc1
gp.fs.10.func.6 = es.nodegains.gp.func.NegExp
gp.fs.10.func.6.nc = nc1
gp.fs.10.func.7 = es.nodegains.gp.func.VladERCA
gp.fs.10.func.7.nc = nc1
gp.fs.10.func.8 = es.nodegains.gp.func.VladERCB
gp.fs.10.func.8.nc = nc1
gp.fs.10.func.9 = es.nodegains.gp.func.VladERCC
gp.fs.10.func.9.nc = nc1
gp.fs.10.func.10 = es.nodegains.gp.func.X1
gp.fs.10.func.10.nc = nc0
gp.fs.10.func.11 = es.nodegains.gp.func.X2
gp.fs.10.func.11.nc = nc0



# vladislavleva-c1
# Note: vladislavleva has three ERCs, all of which are not constants
#       but rather are one-parameter functions with an embedded constant
gp.fs.11 = ec.gp.GPFunctionSet
gp.fs.11.name = vladislavleva-c1
gp.fs.11.size = 13
gp.fs.11.func.0 = es.nodegains.gp.func.Add
gp.fs.11.func.0.nc = nc2
gp.fs.11.func.1 = es.nodegains.gp.func.Mul
gp.fs.11.func.1.nc = nc2
gp.fs.11.func.2 = es.nodegains.gp.func.Sub
gp.fs.11.func.2.nc = nc2
gp.fs.11.func.3 = es.nodegains.gp.func.Div
gp.fs.11.func.3.nc = nc2
gp.fs.11.func.4 = es.nodegains.gp.func.Square
gp.fs.11.func.4.nc = nc1
gp.fs.11.func.5 = es.nodegains.gp.func.Exp
gp.fs.11.func.5.nc = nc1
gp.fs.11.func.6 = es.nodegains.gp.func.NegExp
gp.fs.11.func.6.nc = nc1
gp.fs.11.func.7 = es.nodegains.gp.func.Sin
gp.fs.11.func.7.nc = nc1
gp.fs.11.func.8 = es.nodegains.gp.func.Cos
gp.fs.11.func.8.nc = nc1
gp.fs.11.func.9 = es.nodegains.gp.func.VladERCA
gp.fs.11.func.9.nc = nc1
gp.fs.11.func.10 = es.nodegains.gp.func.VladERCB
gp.fs.11.func.10.nc = nc1
gp.fs.11.func.11 = es.nodegains.gp.func.VladERCC
gp.fs.11.func.11.nc = nc1
gp.fs.11.func.12 = es.nodegains.gp.func.X1
gp.fs.11.func.12.nc = nc0



# vladislavleva-c2
# Note: vladislavleva has three ERCs, all of which are not constants
#       but rather are one-parameter functions with an embedded constant
gp.fs.12 = ec.gp.GPFunctionSet
gp.fs.12.name = vladislavleva-c2
gp.fs.12.size = 14
gp.fs.12.func.0 = es.nodegains.gp.func.Add
gp.fs.12.func.0.nc = nc2
gp.fs.12.func.1 = es.nodegains.gp.func.Mul
gp.fs.12.func.1.nc = nc2
gp.fs.12.func.2 = es.nodegains.gp.func.Sub
gp.fs.12.func.2.nc = nc2
gp.fs.12.func.3 = es.nodegains.gp.func.Div
gp.fs.12.func.3.nc = nc2
gp.fs.12.func.4 = es.nodegains.gp.func.Square
gp.fs.12.func.4.nc = nc1
gp.fs.12.func.5 = es.nodegains.gp.func.Exp
gp.fs.12.func.5.nc = nc1
gp.fs.12.func.6 = es.nodegains.gp.func.NegExp
gp.fs.12.func.6.nc = nc1
gp.fs.12.func.7 = es.nodegains.gp.func.Sin
gp.fs.12.func.7.nc = nc1
gp.fs.12.func.8 = es.nodegains.gp.func.Cos
gp.fs.12.func.8.nc = nc1
gp.fs.12.func.9 = es.nodegains.gp.func.VladERCA
gp.fs.12.func.9.nc = nc1
gp.fs.12.func.10 = es.nodegains.gp.func.VladERCB
gp.fs.12.func.10.nc = nc1
gp.fs.12.func.11 = es.nodegains.gp.func.VladERCC
gp.fs.12.func.11.nc = nc1
gp.fs.12.func.12 = es.nodegains.gp.func.X1
gp.fs.12.func.12.nc = nc0
gp.fs.12.func.13 = es.nodegains.gp.func.X2
gp.fs.12.func.13.nc = nc0







### Don't mess with this, it defines our problem and data 
eval.problem = es.nodegains.gp.Benchmarks
eval.problem.data = ec.app.regression.RegressionData




